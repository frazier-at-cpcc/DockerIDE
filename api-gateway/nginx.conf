worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;

    # Upstream services
    upstream lti_service {
        least_conn;
        server lti-service:3000 max_fails=3 fail_timeout=30s;
    }

    upstream workspace_manager {
        least_conn;
        server workspace-manager:4000 max_fails=3 fail_timeout=30s;
    }

    # Map for workspace routing
    map $request_uri $workspace_session {
        ~^/workspace/([^/]+) $1;
    }

    # Main server block
    server {
        listen 80;
        server_name _;

        # Redirect to HTTPS in production
        if ($http_x_forwarded_proto != "https") {
            return 301 https://$host$request_uri;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # LTI endpoints
        location /lti/ {
            limit_req zone=auth burst=5 nodelay;

            proxy_pass http://lti_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts for LTI
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Workspace manager API (internal)
        location /api/workspace/ {
            # Only allow internal access
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;

            proxy_pass http://workspace_manager/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Workspace routing (VS Code Server)
        location ~ ^/workspace/([^/]+)(/.*)?$ {
            set $session_id $1;
            set $path $2;

            # Resolve workspace pod dynamically
            resolver kube-dns.kube-system.svc.cluster.local valid=5s;
            set $upstream_workspace workspace-$session_id-svc.dockeride.svc.cluster.local:8080;

            # WebSocket support for VS Code Server
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Proxy to workspace
            proxy_pass http://$upstream_workspace$path$is_args$args;

            # Timeouts for long-running connections
            proxy_connect_timeout 10s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;

            # Disable buffering for real-time response
            proxy_buffering off;

            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 = @workspace_error;
        }

        # Workspace error handling
        location @workspace_error {
            default_type application/json;
            return 503 '{"error": "Workspace not available", "message": "The workspace is starting up or not available. Please try again in a few moments."}';
        }

        # Static files (if needed)
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 7d;
            add_header Cache-Control "public, immutable";
        }

        # Default location
        location / {
            return 404 '{"error": "Not Found"}';
            add_header Content-Type application/json;
        }
    }
}