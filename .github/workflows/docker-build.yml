name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'docker-images/**'
      - 'api-gateway/**'
      - 'lti-service/**'
      - 'workspace-manager/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'docker-images/**'
      - 'api-gateway/**'
      - 'lti-service/**'
      - 'workspace-manager/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  build-base:
    name: Build Base Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/dockeride-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Base image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-images/base
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-language-images:
    name: Build ${{ matrix.language }} Image
    runs-on: ubuntu-latest
    needs: build-base
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        language: [python, nodejs, cpp, java, sql]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/dockeride-${{ matrix.language }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.language }} image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-images/${{ matrix.language }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/dockeride-base:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-services:
    name: Build ${{ matrix.service }} Service
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [api-gateway, lti-service, workspace-manager]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/dockeride-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-base, build-language-images, build-services]
    if: always()
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check build results
        id: build_results
        run: |
          if [ "${{ needs.build-base.result }}" == "success" ] && \
             [ "${{ needs.build-language-images.result }}" == "success" ] && \
             [ "${{ needs.build-services.result }}" == "success" ]; then
            echo "✅ All builds passed!"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Some builds failed"
            echo "Base: ${{ needs.build-base.result }}"
            echo "Languages: ${{ needs.build-language-images.result }}"
            echo "Services: ${{ needs.build-services.result }}"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Download all job logs
        if: steps.build_results.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const runId = context.runId;

            // Get all jobs for this workflow run
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });

            let failedJobs = '';
            for (const job of jobs.jobs) {
              if (job.conclusion === 'failure') {
                // Download logs for failed job
                const logResponse = await github.rest.actions.downloadJobLogsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  job_id: job.id,
                });

                failedJobs += `\n### ${job.name} (Failed)\n\n`;
                failedJobs += '<details>\n<summary>Click to view full logs</summary>\n\n```\n';
                failedJobs += logResponse.data;
                failedJobs += '\n```\n</details>\n\n';
              }
            }

            fs.writeFileSync('failed-jobs.txt', failedJobs);
            core.setOutput('failed_jobs', failedJobs);

      - name: Create issue for failed builds
        if: steps.build_results.outputs.status == 'failure'
        id: create_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const runId = context.runId;

            // Get all jobs for this workflow run
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });

            // Build detailed error information
            let errorDetails = '';
            for (const job of jobs.jobs) {
              if (job.conclusion === 'failure') {
                errorDetails += `\n### ❌ ${job.name}\n\n`;

                // Get steps for this job
                for (const step of job.steps) {
                  if (step.conclusion === 'failure') {
                    errorDetails += `**Failed Step:** ${step.name}\n\n`;

                    // Try to download logs
                    try {
                      const logUrl = await github.rest.actions.downloadJobLogsForWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        job_id: job.id,
                      });

                      // Extract relevant error lines from logs
                      const logs = logUrl.data;
                      const errorLines = logs.split('\n')
                        .filter(line =>
                          line.includes('ERROR') ||
                          line.includes('error') ||
                          line.includes('FAILED') ||
                          line.includes('failed') ||
                          line.includes('npm ERR!') ||
                          line.includes('exit code')
                        )
                        .slice(-50); // Last 50 error lines

                      if (errorLines.length > 0) {
                        errorDetails += '<details>\n<summary>Error Details</summary>\n\n```\n';
                        errorDetails += errorLines.join('\n');
                        errorDetails += '\n```\n</details>\n\n';
                      }
                    } catch (e) {
                      errorDetails += `_Could not fetch detailed logs: ${e.message}_\n\n`;
                    }
                  }
                }
              }
            }

            const title = `🤖 Docker Build Failed - Automated Repair Needed`;
            const body = `@claude

            ## Docker Image Build Failed

            The automated build process for Docker images has failed. Here are the complete error details for you to fix.

            ### Build Results
            - **Base Image**: ${{ needs.build-base.result }}
            - **Language Images**: ${{ needs.build-language-images.result }}
            - **Services**: ${{ needs.build-services.result }}

            ### Workflow Details
            - **Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Commit**: \`${{ github.sha }}\`
            - **Branch**: \`${{ github.ref_name }}\`

            ### Failed Jobs and Error Details

            ${errorDetails}

            ### Action Required
            Please:
            1. Analyze the error messages above
            2. Identify the root cause (missing dependencies, syntax errors, etc.)
            3. Fix the affected Dockerfiles or configuration files
            4. Test the fixes locally if possible
            5. Create a pull request with the fixes

            ### Files That May Need Changes
            - \`docker-images/*/Dockerfile\`
            - \`api-gateway/Dockerfile\`
            - \`lti-service/Dockerfile\`
            - \`workspace-manager/Dockerfile\`
            - \`.github/workflows/docker-build.yml\`

            ### Common Issues to Check
            - Missing package dependencies
            - Incorrect base image references (\`BASE_IMAGE\` build arg)
            - Syntax errors in Dockerfiles
            - Missing source files (package.json, package-lock.json, etc.)
            - Network or download failures
            - Build arguments not being passed correctly

            **Triggered by**: ${{ github.event_name }} on commit ${{ github.sha }}
            `;

            // Check if an issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'automated-repair,docker-build'
            });

            if (issues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automated-repair', 'docker-build', 'bug']
              });
              console.log('Created new issue for Claude to fix build failures');
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `## New Build Failure\n\n${body}`
              });
              console.log('Updated existing issue with new build failure');
            }
